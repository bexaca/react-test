{"version":3,"sources":["components/Alert.js","components/WeatherCard.js","components/LocationWeather.js","service.js","pages/Dashboard.js","pages/Login.js","pages/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["alert","message","type","notify","show","WeatherCard","react_default","a","createElement","className","this","props","city","city_name","weather","description","temp","height","width","alt","icon","src","concat","Component","LocationWeather","location","getRequest","query","request","get","key","then","res","body","catch","err","Dashboard","state","currentLocationWeather","value","getCurrentLocationWeather","_callee","coordinates","lat","lon","result","regenerator_default","wrap","_context","prev","next","coords","latitude","longitude","sent","_this","setState","data","stop","handleChange","event","target","handleSubmit","_callee2","_context2","preventDefault","prevState","Object","toConsumableArray","sessionStorage","getItem","navigator","geolocation","getCurrentPosition","history","push","map","index","WeatherCard_WeatherCard","Fragment","onSubmit","onChange","placeholder","react_router_dom","to","LocationWeather_LocationWeather","length","withRouter","Login","username","password","defineProperty","login","setItem","removeItem","_this2","htmlFor","id","required","e","onClick","NoMatch","App","isLoggedIn","notify_default","react_router","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7abf0907.chunk.js","sourcesContent":["import { notify } from 'react-notify-toast';\r\n\r\nexport const alert = (message, type) => notify.show(message, type, 2000);","import React, { Component } from 'react'\r\n\r\nexport default class WeatherCard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 col-md-3 my-3\">\r\n                <div className=\"text-center border\">\r\n                    <h5>{this.props.city.city_name}</h5>\r\n                    <h6>{this.props.city.weather.description}</h6>\r\n                    <h6>{this.props.city.temp}&deg;</h6>\r\n                    <img height=\"50\" width=\"50\" alt={this.props.city.weather.icon} src={`https://www.weatherbit.io/static/img/icons/${this.props.city.weather.icon}.png`}></img>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class LocationWeather extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"col text-center border-bottom\">\r\n        <h4>Weather on your location</h4>\r\n        <h5>{this.props.location.city_name}</h5>\r\n        <h6>{this.props.location.weather.description}</h6>\r\n        <h6>{this.props.location.temp}&deg;</h6>\r\n        <img height=\"50\" width=\"50\" alt={this.props.location.weather.icon} src={`https://www.weatherbit.io/static/img/icons/${this.props.location.weather.icon}.png`}></img>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import request from 'superagent'\r\nimport { alert } from './components/Alert';\r\n\r\nexport const getRequest = (query, message) => {\r\n    return request\r\n    .get('https://api.weatherbit.io/v2.0/current')\r\n    .query(query)\r\n    .query({ 'key': 'd5c3391c63af47658c84946c5fe654e5' })\r\n    .then(res => {\r\n      if (res.body) {\r\n        return res.body;\r\n      } else {\r\n        alert(message, 'error')\r\n      }\r\n    })\r\n    .catch(err => {\r\n      alert(err.message, 'error');\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { alert } from '../components/Alert';\r\nimport WeatherCard from '../components/WeatherCard';\r\nimport LocationWeather from '../components/LocationWeather';\r\nimport { getRequest } from '../service';\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    currentLocationWeather: null,\r\n    value: '',\r\n    city: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (sessionStorage.getItem('user') === sessionStorage.getItem('typedUsername') && sessionStorage.getItem('pass') === sessionStorage.getItem('typedPassword')) {\r\n      navigator.geolocation.getCurrentPosition(this.getCurrentLocationWeather);\r\n    } else {\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  getCurrentLocationWeather = async coordinates => {\r\n    const lat = coordinates.coords.latitude;\r\n    const lon = coordinates.coords.longitude;\r\n\r\n    const result = await getRequest({ lat, lon }, 'No results for your location');\r\n\r\n    if (result) {\r\n      this.setState({\r\n        currentLocationWeather: result.data[0]\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.value) {\r\n      const result = await getRequest({ 'city': this.state.value }, 'No results for searched city');\r\n\r\n      if (result) {\r\n        this.setState(prevState => ({\r\n          city: [...prevState.city, result.data[0]]\r\n        }));\r\n      }\r\n    } else {\r\n      alert('Please, enter some value', 'error');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const weather = this.state.city.map((city, index) => {\r\n      return (\r\n        <WeatherCard key={index} city={city} />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <header className=\"App-header\">\r\n          <div className=\"row py-4\">\r\n            <div className=\"col-12 d-flex justify-content-between\">\r\n              <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Enter city\" className=\"d-block mb-3 form-control\" />\r\n                <input type=\"submit\" value=\"Submit\" className=\"btn btn-dark\" />\r\n              </form>\r\n              <Link to=\"/login\">\r\n                <button className=\"btn btn-danger\">Log out</button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main className=\"py-3\">\r\n          <div className=\"row\">\r\n            {\r\n              this.state.currentLocationWeather &&\r\n              <LocationWeather location={this.state.currentLocationWeather} />\r\n            }\r\n          </div>\r\n          {\r\n            this.state.city.length\r\n              ?\r\n              <div>\r\n                <h5 className=\"text-center mt-4\">Search results</h5>\r\n                <div className=\"row\">\r\n                  {weather}\r\n                </div>\r\n              </div>\r\n              :\r\n              null\r\n          }\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Dashboard)","import React, { Component } from 'react'\r\nimport { alert } from '../components/Alert';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        sessionStorage.removeItem('typedUsername');\r\n        sessionStorage.removeItem('typedPassword');\r\n    }\r\n\r\n    handleChange = (state, value) => {\r\n        this.setState({\r\n            [state]: value\r\n        });\r\n    }\r\n\r\n    login = (event) => {\r\n        const username = sessionStorage.getItem('user');\r\n        const password = sessionStorage.getItem('pass');\r\n\r\n        if (this.state.username === username && this.state.password === password) {\r\n            sessionStorage.setItem('typedUsername', this.state.username);\r\n            sessionStorage.setItem('typedPassword', this.state.password);\r\n            this.props.history.push('/react-test');\r\n            alert(\"Successfully logged in\", 'success');\r\n        } else {\r\n            alert('Please try again', 'error');\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flex-grow-1 justify-content-center row align-items-center\">\r\n                <div className=\"col-4\">\r\n                    <form className=\"form-signin\">\r\n                        <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n                        <label htmlFor=\"inputUsername\" className=\"sr-only\">Username</label>\r\n                        <input type=\"email\" id=\"inputUsername\" className=\"form-control mb-3\" placeholder=\"Username\" required=\"\" onChange={(e) => this.handleChange('username', e.target.value)} />\r\n                        <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                        <input type=\"password\" id=\"inputPassword\" className=\"form-control mb-3\" placeholder=\"Password\" required=\"\" onChange={(e) => this.handleChange('password', e.target.value)} />\r\n                        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\" onClick={this.login}>Sign in</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Login)","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class NoMatch extends Component {\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem('user') === sessionStorage.getItem('typedUsername') && sessionStorage.getItem('pass') === sessionStorage.getItem('typedPassword')) {\r\n        } else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>404</h5>\r\n                <Link to=\"/react-test\">\r\n                    <button className=\"btn btn-success\">Go back</button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Notifications from 'react-notify-toast';\nimport Dashboard from './pages/Dashboard';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\n\nexport default class App extends Component {\n\n  state = {\n    isLoggedIn: false\n  }\n\n  componentDidMount() {\n    sessionStorage.setItem('user', 'user');\n    sessionStorage.setItem('pass', '1234');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid d-flex flex-column\">\n        <Notifications />\n        <Router>\n          <Switch>\n            <Route path=\"/(|react-test)/\" exact component={Dashboard} />\n            <Route path=\"/login\" component={Login} />\n            <Route component={NoMatch} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}