{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","city","handleChange","event","_this","setState","target","handleSubmit","request","get","query","key","then","res","prevState","concat","Object","toConsumableArray","body","data","console","log","preventDefault","weather","this","map","index","react_default","a","createElement","city_name","description","className","onSubmit","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAsEeA,6MAjEbC,MAAQ,CACNC,MAAO,GACPC,KAAM,MAcRC,aAAe,SAACC,GACdC,EAAKC,SAAS,CAAEL,MAAOG,EAAMG,OAAON,WAGtCO,aAAe,SAACJ,GACdK,IACGC,IAAI,0CACJC,MAAM,CAAET,KAAQG,EAAKL,MAAMC,QAC3BU,MAAM,CAAEC,IAAO,qCACfC,KAAK,SAAAC,GACJT,EAAKC,SAAS,SAAAS,GAAS,MAAK,CAC1Bb,KAAI,GAAAc,OAAAC,OAAAC,EAAA,EAAAD,CAAMF,EAAUb,MAAhB,CAAsBY,EAAIK,KAAKC,KAAK,QAE1CC,QAAQC,IAAIR,EAAIK,QAEpBf,EAAMmB,qGAzBNF,QAAQC,IAAI,QACZb,IACGC,IAAI,0CACJC,MAAM,CAAET,KAAQ,aAChBS,MAAM,CAAEC,IAAO,qCACfC,KAAK,SAAAC,GACJO,QAAQC,IAAIR,EAAIK,yCAwBpB,IAAMK,EAAUC,KAAKzB,MAAME,KAAKwB,IAAI,SAACxB,EAAMyB,GACzC,OACEC,EAAAC,EAAAC,cAAA,OAAKlB,IAAKe,GACRC,EAAAC,EAAAC,cAAA,UAAK5B,EAAK6B,WACVH,EAAAC,EAAAC,cAAA,UAAK5B,EAAKsB,QAAQQ,gBAKxB,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,QAAMI,SAAUT,KAAKjB,cACnBoB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOlC,MAAOwB,KAAKzB,MAAMC,MAAOmC,SAAUX,KAAKtB,eAC3DyB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASlC,MAAM,YAG3BwB,KAAKzB,MAAME,KAETsB,EAEAI,EAAAC,EAAAC,cAAA,kCA1DIO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.68bbe699.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport request from 'superagent'\n\nclass App extends Component {\n  state = {\n    value: '',\n    city: []\n  };\n\n  componentDidMount() {\n    console.log('test')\n    request\n      .get('https://api.weatherbit.io/v2.0/current')\n      .query({ 'city': 'Belgrade' })\n      .query({ 'key': 'd5c3391c63af47658c84946c5fe654e5' })\n      .then(res => {\n        console.log(res.body);\n      });\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    request\n      .get('https://api.weatherbit.io/v2.0/current')\n      .query({ 'city': this.state.value })\n      .query({ 'key': 'd5c3391c63af47658c84946c5fe654e5' })\n      .then(res => {\n        this.setState(prevState => ({\n          city: [...prevState.city, res.body.data[0]]\n        }));\n        console.log(res.body);\n      });\n    event.preventDefault();\n  }\n\n  render() {\n\n    const weather = this.state.city.map((city, index) => {\n      return (\n        <div key={index}>\n          <h5>{city.city_name}</h5>\n          <h6>{city.weather.description}</h6>\n        </div>\n      )\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {\n            this.state.city\n              ?\n              weather\n              :\n              <h5>Populate me</h5>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}