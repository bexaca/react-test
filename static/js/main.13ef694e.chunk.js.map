{"version":3,"sources":["components/Alert.js","pages/Dashboard.js","pages/Login.js","pages/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["alert","message","type","notify","show","Dashboard","state","currentLocationWeather","value","city","getCurrentLocationWeather","coordinates","lat","coords","latitude","lon","longitude","request","get","query","key","then","res","body","_this","setState","data","catch","err","handleChange","event","target","handleSubmit","prevState","concat","Object","toConsumableArray","preventDefault","sessionStorage","getItem","navigator","geolocation","getCurrentPosition","this","props","history","push","weather","map","index","react_default","a","createElement","city_name","description","temp","height","width","alt","icon","src","className","react_router_dom","to","onSubmit","onChange","length","Component","withRouter","Login","username","password","defineProperty","login","setItem","removeItem","_this2","htmlFor","id","placeholder","required","e","onClick","NoMatch","App","isLoggedIn","notify_default","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13ef694e.chunk.js","sourcesContent":["import { notify } from 'react-notify-toast';\r\n\r\nexport const alert = (message, type) => notify.show(message, type, 2000);","import React, { Component } from 'react';\r\nimport request from 'superagent'\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { alert } from '../components/Alert';\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    currentLocationWeather: null,\r\n    value: '',\r\n    city: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (sessionStorage.getItem('user') === sessionStorage.getItem('typedUsername') && sessionStorage.getItem('pass') === sessionStorage.getItem('typedPassword')) {\r\n      navigator.geolocation.getCurrentPosition(this.getCurrentLocationWeather);\r\n    } else {\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  getCurrentLocationWeather = coordinates => {\r\n    const lat = coordinates.coords.latitude;\r\n    const lon = coordinates.coords.longitude;\r\n\r\n    request\r\n      .get('https://api.weatherbit.io/v2.0/current')\r\n      .query({ lat })\r\n      .query({ lon })\r\n      .query({ 'key': 'd5c3391c63af47658c84946c5fe654e5' })\r\n      .then(res => {\r\n        if (res.body) {\r\n          this.setState({\r\n            currentLocationWeather: res.body.data[0]\r\n          });\r\n        } else {\r\n          alert('No results for your location', 'error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        alert(err.message, 'error');\r\n      });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    if (this.state.value) {\r\n      request\r\n        .get('https://api.weatherbit.io/v2.0/current')\r\n        .query({ 'city': this.state.value })\r\n        .query({ 'key': 'd5c3391c63af47658c84946c5fe654e5' })\r\n        .then(res => {\r\n          if (res.body) {\r\n            this.setState(prevState => ({\r\n              city: [...prevState.city, res.body.data[0]]\r\n            }));\r\n          } else {\r\n            alert('No results for choosen city', 'error')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          alert(err.message, 'error');\r\n        });\r\n    } else {\r\n      alert('Please, enter some value', 'error');\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n\r\n    const weather = this.state.city.map((city, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <h5>{city.city_name}</h5>\r\n          <h6>{city.weather.description}</h6>\r\n          <h6>{city.temp}&deg;</h6>\r\n          <img height=\"50\" width=\"50\" alt={city.weather.icon} src={`https://www.weatherbit.io/static/img/icons/${city.weather.icon}.png`}></img>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <header className=\"App-header\">\r\n        <Link to=\"/login\">\r\n          <button className=\"btn btn-danger\">Log out</button>\r\n        </Link>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          <input type=\"submit\" value=\"Submit\" className=\"btn btn-dark\" />\r\n        </form>\r\n        {\r\n          this.state.currentLocationWeather\r\n            ?\r\n            <div>\r\n              <h4>Weather on your location</h4>\r\n              <h5>{this.state.currentLocationWeather.city_name}</h5>\r\n              <h6>{this.state.currentLocationWeather.weather.description}</h6>\r\n              <h6>{this.state.currentLocationWeather.temp}&deg;</h6>\r\n              <img height=\"50\" width=\"50\" alt={this.state.currentLocationWeather.weather.icon} src={`https://www.weatherbit.io/static/img/icons/${this.state.currentLocationWeather.weather.icon}.png`}></img>\r\n            </div>\r\n            :\r\n            null\r\n        }\r\n        {\r\n          this.state.city.length\r\n            ?\r\n            weather\r\n            :\r\n            null\r\n        }\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Dashboard)","import React, { Component } from 'react'\r\nimport { alert } from '../components/Alert';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        sessionStorage.removeItem('typedUsername');\r\n        sessionStorage.removeItem('typedPassword');\r\n    }\r\n\r\n    handleChange = (state, value) => {\r\n        this.setState({\r\n            [state]: value\r\n        });\r\n    }\r\n\r\n    login = (event) => {\r\n        const username = sessionStorage.getItem('user');\r\n        const password = sessionStorage.getItem('pass');\r\n\r\n        if (this.state.username === username && this.state.password === password) {\r\n            sessionStorage.setItem('typedUsername', this.state.username);\r\n            sessionStorage.setItem('typedPassword', this.state.password);\r\n            this.props.history.push('/');\r\n            alert(\"Successfully logged in\", 'success');\r\n        } else {\r\n            alert('Please try again', 'error');\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-signin\">\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n                <label htmlFor=\"inputUsername\" className=\"sr-only\">Username</label>\r\n                <input type=\"email\" id=\"inputUsername\" className=\"form-control\" placeholder=\"Username\" required=\"\" onChange={(e) => this.handleChange('username', e.target.value)} />\r\n                <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required=\"\" onChange={(e) => this.handleChange('password', e.target.value)} />\r\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\" onClick={this.login}>Sign in</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Login)","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class NoMatch extends Component {\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem('user') === sessionStorage.getItem('typedUsername') && sessionStorage.getItem('pass') === sessionStorage.getItem('typedPassword')) {\r\n        } else {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\" id=\"main\">\r\n                <h1 className=\"mr-3 pr-3 align-top border-right inline-block align-content-center\">404</h1>\r\n                <div className=\"inline-block align-middle\">\r\n                    <h2 className=\"font-weight-normal lead\" id=\"desc\">The page you requested was not found.</h2>\r\n                    <Link to='/'>\r\n                        <button className=\"btn btn-success\">\r\n                            Go back\r\n                    </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Notifications from 'react-notify-toast';\nimport Dashboard from './pages/Dashboard';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\n\nexport default class App extends Component {\n\n  state = {\n    isLoggedIn: false\n  }\n\n  componentDidMount() {\n    sessionStorage.setItem('user', 'user');\n    sessionStorage.setItem('pass', '1234');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Notifications />\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n            <Route path=\"/login\" component={Login} />\n            <Route component={NoMatch} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}